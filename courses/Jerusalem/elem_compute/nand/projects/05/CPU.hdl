// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not16(in = instruction, out = Notout);
    Not16(in = Notout, out[15] = acbit, out[12] = abit, out[11] = c1, out[10] = c2, out[9] = c3, 
            out[8] = c4, out[7] = c5, out[6] = c6, out[5] = d1, out[4] = d2, out[3] = d3, 
        out[0..2] = jmpbits);

    And(a = acbit, b = d3, out = writeM);

    // select the value of register A
    Mux16(a = regA, b = aluOut, sel = d1, out = outAreg1);
    Mux16(a = instruction, b = outAreg1, sel = acbit, out = outA); 
    
    //load the register A only when
    //1. acbit is set to zero or when d1 is set to 1 
    Not(in = acbit, out = notacbit);
    Or(a = notacbit, b = d1, out = loadA);
    ARegister(in = outA, load = loadA, out = regA, out[0..14] = addressM);

    // select the value of register lower part of ALU
    Mux16(a = regA, b = inM, sel = abit, out = regAM);
    // select the D register
    And(a = d2, b = acbit, out = dload);
    DRegister(in = aluOut, load = dload, out = regD);

    ALU(x = regD , y= regAM, zx = c1, nx = c2, zy = c3, ny = c4, f = c5, no = c6, out = outM, out = aluOut, zr = zero, ng = neg); 
    
    DMux8Way(in = true, sel = jmpbits, a = jno, b = jgt, c = jeq, d = jge, e = jlt, f = jne, g = jle, h = jmp);

    Not(in = neg, out = posOrzero);     
    Not(in = zero, out = notzero);     
    
    And(a = posOrzero, b = notzero, out = pos);

    And(a = jgt, b = pos,  out = jgtOut);
    And(a = jeq, b = zero, out = jeqOut);

    Or(a = pos, b = zero, out = ge);
    And(a = jge, b = ge, out = jgeOut);
    
    And(a = jlt, b = neg, out = jltOut);
    And(a = jne, b = notzero, out = jneOut);
    
    Or(a = neg, b = zero, out = le);
    And(a = jle, b = le, out = jleOut);

    Or8Way(in[0] = false, in[1] = jgtOut, in[2] = jeqOut, in[3] = jgeOut, in[4] = jltOut, in[5] = jneOut, in[6] = jleOut,
        in[7] = jmp, out = pcload);

    And(a = acbit, b = pcload, out = pcloadF);
    PC(in = regA, load = pcloadF, inc = true, reset = reset, out[0..14] = pc); 

}
