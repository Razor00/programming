function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%


ty = zeros(m, num_labels);
for i=1:m,
    sety = y(i);
    if sety == 0,
        sety = 10;
    end
    ty(i,sety) = 1;
end

% Theta1 = 25 * 401, 
a1 = [ones(m , 1) X];
%401 * 5000
a1 = a1';
% result = 25 * 5000
a2    = sigmoid(Theta1 * a1);

%printf("size of a2 ");
size(a2);

%add bias of 1 for each row of inputs
% so transpose above matrix, 5000x25, add a column of 1 for each row
a2    = [ones(size(a2', 1), 1) a2'];

%26 * 5000
a2    = a2';
%printf("size of a2 ");
size(a2);
%printf("size of theta 2 ");
size(Theta2);
%Theta2 = 10 x 26, a2 = 26 * 5000
a3    = sigmoid(Theta2 * a2);
s     = a3';
% because its a calculation at once , we have to a elementwise mutiplication
% 5000 * 10, 5000 * 10
J    = -1/m * sum(sum((log(s) .* ty + (log(1 - s)) .* (1 - ty))));


regJ = 0;
% calculate reguralization
for j=1:size(Theta1,1),
    for k=2:size(Theta1, 2),
        regJ = regJ + Theta1(j,k) * Theta1(j, k);
    end
end
% calculate reguralization
for j=1:size(Theta2,1),
    for k=2:size(Theta2, 2),
        regJ = regJ + Theta2(j,k) * Theta2(j, k);
    end
end
J = J + regJ * lambda/(2*m);

size(s);
size(ty);
size(J);
    



% Back Propagation calculate
%layer 3
% 5000 * 10
% for each node calculation, do transpose
delta_3 = (s - ty); %  5000 * 10

%size(delta_3)

temp_th1 = Theta1(:, 2:end); % 25 * 400
temp_th2 = Theta2(:, 2:end); % 10 * 25


%    25*400   , 400 * 5000 
z2 = temp_th1 * X';

%5000 * 10, 10 * 25   
delta_2 = (delta_3 * temp_th2) .* sigmoidGradient(z2'); 
% 5000 * 25


%delta_2' = 25  * 5000 
%X       =  5000 * 400
%output = 25 * 400
Theta1_grad = delta_2' * X;
t1_m = size(Theta1_grad, 1);
Theta1_grad = [zeros(t1_m, 1) Theta1_grad];

%calculate gradients
%delta3' = 10 * 5000,  a2 = 26 * 5000
% output = 10 * 25
temp_a2 = a2';
temp_a2 = temp_a2(:, 2:end);

Theta2_grad = delta_3' * temp_a2; 

t2_m = size(Theta2_grad, 1);
Theta2_grad = [zeros(t2_m, 1) Theta2_grad];
%size(Theta2_grad)
%size(Theta1_grad)
Theta2_grad = Theta2_grad/m;
Theta1_grad = Theta1_grad/m;

size(Theta2_grad)
size(Theta1_grad)
T

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
